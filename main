def clean_name(name):
    
    """ Returns a string with non-standard characters removed. """ 
    
    import string
    
    name = name.encode('ascii', errors='ignore')  # converts standard ASCII input from Unicode format
    name = name.strip()  # removes leading and trailing spaces
    name = name.lower()  # converts to lowercase
    
    swap = string.maketrans("-+&. ", "_____")  # translation table (from, to)
    punc = string.punctuation  # assigns punctuation character set to variable
    punc = punc.replace("-", "")  # removes punctuation that will be replaced
    punc = punc.replace("+", "")
    punc = punc.replace("&", "")
    punc = punc.replace(".", "")
    punc = punc.replace("_", "")
    name = string.translate(name, swap, punc)  # replaces characters based on translation table then deletes punctuation
    
    mod_name = str(name[0]) # assigns first character of input to empty string
    for i, elem in enumerate(name):  # iterates through each element of input string
        if i > 0:
            if elem == name[i-1] and elem == '_':  # checks previous element for underscore characters
                continue  # skips repeating underscore characters
            else:
                mod_name += elem  # builds input string sequentially

    return mod_name  # outputs rebuilt (cleaned) user input

def ac(text, color):

    """ (a)dds (c)olor to text, using the standard color name or assigned identification number """

    import csv

    if len(str(color)) > 2:  # check user input for color name or color id
        color = color.title()  # converts to titlecase
    else:
        color = int(color)  # converts to integer
        
    color_table_path = r'\\haleyaldrich.com\share\oak_public\Ian\GIS_Resources\Expressions and Scripts\Arcpy\color_style_reference_2017_0103.csv'  # point to updated color style reference CSV file
    color_table_open = open(color_table_path, 'rb')  # open CSV file to read
    color_palette = csv.DictReader(color_table_open)  # create a dictionary object from CSV file

    for row in color_palette:  # iterate through rows in CSV file
        if color == row['color_name'] or color == int(row['color_code']):  # check user input against color name or color ID
            label_colored = "<CLR RED='{}' GREEN='{}' BLUE='{}'>".format(row['red_value'], row['green_value'], row['blue_value']) + text + "</CLR>"  # retrieve RGB color values
            break  # stop iterating through rows in CSV file
        else:
            label_colored = "<CLR RED='{}' GREEN='{}' BLUE='{}'>".format(0, 0, 0) + text + "</CLR>"  # display black label if unmatched

    return label_colored  # output colored label

def ab(text):

    """ (a)dds (b)old to text """

    label_bold = "<BOL>" + text + "</BOL>"

    return label_bold  # output bold label
    
def ai(text):

    """ (a)dds (i)talics to text """

    label_italics = "<ITA>" + text + "</ITA>"

    return label_italics  # output italicized label
    
def au(text):

    """ (a)dds (u)nderline to text """

    label_underline = "<UND>" + text + "</UND>"

    return label_underline  # output underlined label

def add_fields_line(fc):

    """ Add standard fields to a polyline feature class or shapefile. """
    
    fc_path = arcpy.Describe(fc).catalogPath
    geospatial_data_type = arcpy.Describe(fc_path).dataType
    
    if geospatial_data_type == 'FeatureClass':
        arcpy.AddField_management(fc, "loc_id", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "coord_x_start", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "coord_y_start", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "coord_x_end", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "coord_y_end", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_type", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_subtype", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_descr", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "region", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "status", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "source", "TEXT", "", "", 240, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "notes", "TEXT", "", "", 120, "", "NULLABLE", "NON_REQUIRED")
    elif geospatial_data_type == 'ShapeFile':
        arcpy.AddField_management(fc, "loc_id", "TEXT", "", "", 40)
        arcpy.AddField_management(fc, "x_start", "DOUBLE", 14, 4)
        arcpy.AddField_management(fc, "y_start", "DOUBLE", 14, 4)
        arcpy.AddField_management(fc, "x_end", "DOUBLE", 14, 4)
        arcpy.AddField_management(fc, "y_end", "DOUBLE", 14, 4)
        arcpy.AddField_management(fc, "loc_type", "TEXT", "", "", 60)
        arcpy.AddField_management(fc, "loc_sub", "TEXT", "", "", 60)
        arcpy.AddField_management(fc, "loc_descr", "TEXT", "", "", 100)
        arcpy.AddField_management(fc, "region", "TEXT", "", "", 40)
        arcpy.AddField_management(fc, "status", "TEXT", "", "", 40)
        arcpy.AddField_management(fc, "visible", "TEXT", "", "", 10)
        arcpy.AddField_management(fc, "source", "TEXT", "", "", 240)
        arcpy.AddField_management(fc, "updated", "DATE")
        arcpy.AddField_management(fc, "notes", "TEXT", "", "", 120)
    else:
        print "Incorrect geospatial data type - attempt with either Shapefile or Feature Class only."
        return

def add_fields_point(fc):

    """ Add standard fields to a point feature class. """

    fc_path = arcpy.Describe(fc).catalogPath
    geospatial_data_type = arcpy.Describe(fc_path).dataType

    if geospatial_data_type == 'FeatureClass':
        arcpy.AddField_management(fc, "loc_id", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "coord_x", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "coord_y", "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "latitude", "DOUBLE", 12, 8, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "longitude", "DOUBLE", 12, 8, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_type", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_subtype", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_descr", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_value", "DOUBLE", 12, 3, "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "region", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "status", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "source", "TEXT", "", "", 240, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "notes", "TEXT", "", "", 120, "", "NULLABLE", "NON_REQUIRED")
    elif geospatial_data_type == 'ShapeFile':
        arcpy.AddField_management(fc, "loc_id", "TEXT", "", "", 40)
        arcpy.AddField_management(fc, "coord_x", "DOUBLE", 14, 4)
        arcpy.AddField_management(fc, "coord_y", "DOUBLE", 14, 4)
        arcpy.AddField_management(fc, "latitude", "DOUBLE", 12, 8)
        arcpy.AddField_management(fc, "longitude", "DOUBLE", 12, 8)
        arcpy.AddField_management(fc, "loc_type", "TEXT", "", "", 60)
        arcpy.AddField_management(fc, "loc_sub", "TEXT", "", "", 60)
        arcpy.AddField_management(fc, "loc_descr", "TEXT", "", "", 100)
        arcpy.AddField_management(fc, "loc_value", "DOUBLE", 12, 3)
        arcpy.AddField_management(fc, "region", "TEXT", "", "", 40)
        arcpy.AddField_management(fc, "status", "TEXT", "", "", 40)
        arcpy.AddField_management(fc, "visible", "TEXT", "", "", 10)
        arcpy.AddField_management(fc, "source", "TEXT", "", "", 240)
        arcpy.AddField_management(fc, "updated", "DATE")
        arcpy.AddField_management(fc, "notes", "TEXT", "", "", 120)
    else:
        print "Incorrect geospatial data type - attempt with either Shapefile or Feature Class only."
        return
    
def add_fields_poly(fc):

    """ Add standard fields to a polygon feature class. """

    fc_path = arcpy.Describe(fc).catalogPath
    geospatial_data_type = arcpy.Describe(fc_path).dataType
    
    if geospatial_data_type == 'FeatureClass':
        arcpy.AddField_management(fc, "loc_id", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_type", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_subtype", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_descr", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "region", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "status", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "source", "TEXT", "", "", 240, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "notes", "TEXT", "", "", 120, "", "NULLABLE", "NON_REQUIRED")
    elif geospatial_data_type == 'ShapeFile':
        arcpy.AddField_management(fc, "loc_id", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_type", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_subtype", "TEXT", "", "", 60, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "loc_descr", "TEXT", "", "", 100, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "region", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "status", "TEXT", "", "", 40, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "visible", "TEXT", "", "", 10, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "source", "TEXT", "", "", 240, "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "last_updated", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED")
        arcpy.AddField_management(fc, "notes", "TEXT", "", "", 120, "", "NULLABLE", "NON_REQUIRED")
    else:
        print "Incorrect geospatial data type - attempt with either Shapefile or Feature Class only."
        return

def update_id(fc, id_field='loc_id', amount=1, delimiter='-'):

    """ Updates a numbered sample ID by a specified amount. """
    
    fc_fields = [f.name for f in arcpy.ListFields(fc)]
    
    if 'loc_id_rev' not in fc_fields:
        arcpy.AddField_management(fc, 'loc_id_rev', 'TEXT', '', '', 30)

    with arcpy.da.UpdateCursor(fc, [id_field, 'loc_id_rev']) as update_cursor:
        for row in update_cursor:
            sample = str(row[0])
            prefix = sample[:sample.rfind(delimiter)]
            final_element = len(sample.split(delimiter)) - 1
            try:
                suffix = int(sample.split(delimiter)[final_element]) + amount
                if suffix < 10:
                    combined = [prefix, '0' + str(suffix)]
                else:
                    combined = [prefix, str(suffix)]
                row[1] = delimiter.join(combined)
            except ValueError:
                import string
                for element in sample[::-1]:
                    if element not in string.digits:
                        recommended_split = element
                        break
                print "Location ({0}) cannot be split with the '{1}' character. Please attempt using '{2}' as the delimiter.".format(sample, delimiter, recommended_split)
            update_cursor.updateRow(row)

def update_id_nwse(fc, prefix='HA-'):

    """ Updates numbered sample IDs by location, descending from northwest position to southeast position. """
    
    cursor_fields = ['loc_id_rev', 'longitude', 'latitude']
    coord_fields = ['SHAPE@Y', 'SHAPE@X', 'latitude', 'longitude']
    gcs = arcpy.Describe(fc).spatialReference.GCS
    order_clause = (None, 'ORDER BY {0} ASC, {1} DESC'.format(arcpy.AddFieldDelimiters(fc, 'longitude'), arcpy.AddFieldDelimiters(fc, 'latitude')))

    if prefix.endswith('-'):
        prefix = prefix.upper()
    else:
        prefix = prefix.upper() + '-'

    fc_fields = [f.name for f in arcpy.ListFields(fc)]
    
    if 'loc_id_rev' not in fc_fields:
        arcpy.AddField_management(fc, 'loc_id_rev', 'TEXT', '', '', 30)
    
    if 'longitude' not in fc_fields:
        arcpy.AddField_management(fc, 'longitude', 'DOUBLE', 12, 8)
    
    if 'latitude' not in fc_fields:
        arcpy.AddField_management(fc, 'latitude', 'DOUBLE', 12, 8)
    
    with arcpy.da.UpdateCursor(fc, coord_fields, spatial_reference=gcs) as coord_updates:
        for row in coord_updates:
            row[2] = row[0]
            row[3] = row[1]
            coord_updates.updateRow(row)
    
    counter = 1
    with arcpy.da.UpdateCursor(fc, cursor_fields, sql_clause=order_clause) as order_updates:
        for row in order_updates:
            if counter < 10:
                row[0] = prefix + '0' + str(counter)
            else:
                row[0] = prefix + str(counter)
            order_updates.updateRow(row)
            counter += 1
            
def update_id_nesw(fc, prefix='HA-'):

    """ Updates numbered sample IDs by location, descending from northeast position to southwest position. """
    
    cursor_fields = ['loc_id_rev', 'longitude', 'latitude']
    coord_fields = ['SHAPE@Y', 'SHAPE@X', 'latitude', 'longitude']
    gcs = arcpy.Describe(fc).spatialReference.GCS
    order_clause = (None, 'ORDER BY {0} DESC, {1} DESC'.format(arcpy.AddFieldDelimiters(fc, 'longitude'), arcpy.AddFieldDelimiters(fc, 'latitude')))

    if prefix.endswith('-'):
        prefix = prefix.upper()
    else:
        prefix = prefix.upper() + '-'

    fc_fields = [f.name for f in arcpy.ListFields(fc)]
    
    if 'loc_id_rev' not in fc_fields:
        arcpy.AddField_management(fc, 'loc_id_rev', 'TEXT', '', '', 30)
    
    if 'longitude' not in fc_fields:
        arcpy.AddField_management(fc, 'longitude', 'DOUBLE', 12, 8)
    
    if 'latitude' not in fc_fields:
        arcpy.AddField_management(fc, 'latitude', 'DOUBLE', 12, 8)
    
    with arcpy.da.UpdateCursor(fc, coord_fields, spatial_reference=gcs) as coord_updates:
        for row in coord_updates:
            row[2] = row[0]
            row[3] = row[1]
            coord_updates.updateRow(row)
    
    counter = 1
    with arcpy.da.UpdateCursor(fc, cursor_fields, sql_clause=order_clause) as order_updates:
        for row in order_updates:
            if counter < 10:
                row[0] = prefix + '0' + str(counter)
            else:
                row[0] = prefix + str(counter)
            order_updates.updateRow(row)
            counter += 1
            
def update_id_swne(fc, prefix='HA-'):

    """ Updates numbered sample IDs by location, descending from southwest position to northeast position. """
    
    cursor_fields = ['loc_id_rev', 'longitude', 'latitude']
    coord_fields = ['SHAPE@Y', 'SHAPE@X', 'latitude', 'longitude']
    gcs = arcpy.Describe(fc).spatialReference.GCS
    order_clause = (None, 'ORDER BY {0} ASC, {1} ASC'.format(arcpy.AddFieldDelimiters(fc, 'longitude'), arcpy.AddFieldDelimiters(fc, 'latitude')))

    if prefix.endswith('-'):
        prefix = prefix.upper()
    else:
        prefix = prefix.upper() + '-'

    fc_fields = [f.name for f in arcpy.ListFields(fc)]
    
    if 'loc_id_rev' not in fc_fields:
        arcpy.AddField_management(fc, 'loc_id_rev', 'TEXT', '', '', 30)
    
    if 'longitude' not in fc_fields:
        arcpy.AddField_management(fc, 'longitude', 'DOUBLE', 12, 8)
    
    if 'latitude' not in fc_fields:
        arcpy.AddField_management(fc, 'latitude', 'DOUBLE', 12, 8)
    
    with arcpy.da.UpdateCursor(fc, coord_fields, spatial_reference=gcs) as coord_updates:
        for row in coord_updates:
            row[2] = row[0]
            row[3] = row[1]
            coord_updates.updateRow(row)
    
    counter = 1
    with arcpy.da.UpdateCursor(fc, cursor_fields, sql_clause=order_clause) as order_updates:
        for row in order_updates:
            if counter < 10:
                row[0] = prefix + '0' + str(counter)
            else:
                row[0] = prefix + str(counter)
            order_updates.updateRow(row)
            counter += 1
            
def update_id_senw(fc, prefix='HA-'):

    """ Updates numbered sample IDs by location, descending from southeast position to northwest position. """
    
    cursor_fields = ['loc_id_rev', 'longitude', 'latitude']
    coord_fields = ['SHAPE@Y', 'SHAPE@X', 'latitude', 'longitude']
    gcs = arcpy.Describe(fc).spatialReference.GCS
    order_clause = (None, 'ORDER BY {0} DESC, {1} ASC'.format(arcpy.AddFieldDelimiters(fc, 'longitude'), arcpy.AddFieldDelimiters(fc, 'latitude')))

    if prefix.endswith('-'):
        prefix = prefix.upper()
    else:
        prefix = prefix.upper() + '-'

    fc_fields = [f.name for f in arcpy.ListFields(fc)]
    
    if 'loc_id_rev' not in fc_fields:
        arcpy.AddField_management(fc, 'loc_id_rev', 'TEXT', '', '', 30)
    
    if 'longitude' not in fc_fields:
        arcpy.AddField_management(fc, 'longitude', 'DOUBLE', 12, 8)
    
    if 'latitude' not in fc_fields:
        arcpy.AddField_management(fc, 'latitude', 'DOUBLE', 12, 8)
    
    with arcpy.da.UpdateCursor(fc, coord_fields, spatial_reference=gcs) as coord_updates:
        for row in coord_updates:
            row[2] = row[0]
            row[3] = row[1]
            coord_updates.updateRow(row)
    
    counter = 1
    with arcpy.da.UpdateCursor(fc, cursor_fields, sql_clause=order_clause) as order_updates:
        for row in order_updates:
            if counter < 10:
                row[0] = prefix + '0' + str(counter)
            else:
                row[0] = prefix + str(counter)
            order_updates.updateRow(row)
            counter += 1

def xy_update(fc, field_x='coord_x', field_y='coord_y'):

    """ Quickly updates coordinates fields, for northings and eastings. """
    
    fc_path = arcpy.Describe(fc).catalogPath
    geospatial_data_type = arcpy.Describe(fc_path).dataType
    pcs = arcpy.Describe(fc).spatialReference
    fc_fields = [f.name for f in arcpy.ListFields(fc)]
    
    if geospatial_data_type == 'FeatureClass':
        if field_x not in fc_fields:
            arcpy.AddField_management(fc, field_x, "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        if field_y not in fc_fields:
            arcpy.AddField_management(fc, field_y, "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
    elif geospatial_data_type == 'ShapeFile':
        if field_x not in fc_fields:
            arcpy.AddField_management(fc, field_x, "DOUBLE", 14, 4)
        if field_y not in fc_fields:
            arcpy.AddField_management(fc, field_y, "DOUBLE", 14, 4)
    else:
        print "Incorrect geospatial data type - attempt with either Shapefile or Feature Class only."
        return

    with arcpy.da.UpdateCursor(fc, ['SHAPE@X', 'SHAPE@Y', field_x, field_y], spatial_reference=pcs) as update_cursor:
        for row in update_cursor:
                row[2] = row[0]
                row[3] = row[1]
                update_cursor.updateRow(row)
            
def dd_update(fc, field_y='latitude', field_x='longitude'):

    """ Quickly updates coordinates fields, for decimal degrees. """
    
    fc_path = arcpy.Describe(fc).catalogPath
    geospatial_data_type = arcpy.Describe(fc_path).dataType
    gcs = arcpy.Describe(fc).spatialReference.GCS
    fc_fields = [f.name for f in arcpy.ListFields(fc)]
    
    if geospatial_data_type == 'FeatureClass':
        if field_y not in fc_fields:
            arcpy.AddField_management(fc, field_y, "DOUBLE", 12, 8, "", "", "NULLABLE", "NON_REQUIRED")
        if field_x not in fc_fields:
            arcpy.AddField_management(fc, field_x, "DOUBLE", 12, 8, "", "", "NULLABLE", "NON_REQUIRED")
    elif geospatial_data_type == 'ShapeFile':
        if field_y not in fc_fields:
            arcpy.AddField_management(fc, field_y, "DOUBLE", 12, 8)
        if field_x not in fc_fields:
            arcpy.AddField_management(fc, field_x, "DOUBLE", 12, 8)
    else:
        print "Incorrect geospatial data type - attempt with either Shapefile or Feature Class only."
        return

    with arcpy.da.UpdateCursor(fc, ['SHAPE@X', 'SHAPE@Y', field_x, field_y], spatial_reference=gcs) as update_cursor:
        for row in update_cursor:
                row[2] = row[0]
                row[3] = row[1]
                update_cursor.updateRow(row)

def coords(fc, easting='coord_x', northing='coord_y', latitude='latitude', longitude='longitude'):

    """ Quickly updates all coordinate fields. """
    
    fc_path = arcpy.Describe(fc).catalogPath
    geospatial_data_type = arcpy.Describe(fc_path).dataType
    gcs = arcpy.Describe(fc).spatialReference.GCS
    pcs = arcpy.Describe(fc).spatialReference
    fc_fields = [f.name for f in arcpy.ListFields(fc)]
    
    if geospatial_data_type == 'FeatureClass':
        if northing not in fc_fields:
            arcpy.AddField_management(fc, northing, "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        if easting not in fc_fields:
            arcpy.AddField_management(fc, easting, "DOUBLE", 14, 4, "", "", "NULLABLE", "NON_REQUIRED")
        if latitude not in fc_fields:
            arcpy.AddField_management(fc, latitude, "DOUBLE", 12, 8, "", "", "NULLABLE", "NON_REQUIRED")
        if longitude not in fc_fields:
            arcpy.AddField_management(fc, longitude, "DOUBLE", 12, 8, "", "", "NULLABLE", "NON_REQUIRED")
    elif geospatial_data_type == 'ShapeFile':
        if northing not in fc_fields:
            arcpy.AddField_management(fc, northing, "DOUBLE", 14, 4)
        if easting not in fc_fields:
            arcpy.AddField_management(fc, easting, "DOUBLE", 14, 4)
        if latitude not in fc_fields:
            arcpy.AddField_management(fc, latitude, "DOUBLE", 12, 8)
        if longitude not in fc_fields:
            arcpy.AddField_management(fc, longitude, "DOUBLE", 12, 8)
    else:
        print "Incorrect geospatial data type - attempt with either Shapefile or Feature Class only."
        return

    with arcpy.da.UpdateCursor(fc, ['SHAPE@X', 'SHAPE@Y', easting, northing], spatial_reference=pcs) as update_cursor:
        for row in update_cursor:
                row[2] = row[0]
                row[3] = row[1]
                update_cursor.updateRow(row)
    
    with arcpy.da.UpdateCursor(fc, ['SHAPE@X', 'SHAPE@Y', longitude, latitude], spatial_reference=gcs) as update_cursor:
        for row in update_cursor:
                row[2] = row[0]
                row[3] = row[1]
                update_cursor.updateRow(row)
